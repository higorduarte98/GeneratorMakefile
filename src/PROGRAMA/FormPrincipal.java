/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package PROGRAMA;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Formatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author higor
 */
public class FormPrincipal extends javax.swing.JFrame {
    
    /**
     * Creates new form FormPrincipal
     */
    public FormPrincipal() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblSelecionar = new javax.swing.JLabel();
        btnSelecionar = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstArquivos = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        btnGerar = new javax.swing.JButton();
        cbLinguagem = new javax.swing.JComboBox<>();
        lblLinguagem = new javax.swing.JLabel();
        lblNome = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblSelecionar.setText("Selecionar Arquivos:");

        btnSelecionar.setText("Selecionar");
        btnSelecionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Lista de Arquivos para compilar"));

        jScrollPane1.setViewportView(lstArquivos);

        jLabel1.setText("Observação: Selecione o arquivo principal na tabela");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        btnGerar.setText("Gerar Makefile");
        btnGerar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGerarActionPerformed(evt);
            }
        });

        cbLinguagem.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "c", "c++" }));

        lblLinguagem.setText("Linguagem:");

        lblNome.setText("Nome do executavel:");

        txtNome.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNomeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lblLinguagem)
                        .addGap(18, 18, 18)
                        .addComponent(cbLinguagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lblSelecionar)
                        .addGap(18, 18, 18)
                        .addComponent(btnSelecionar)
                        .addGap(18, 18, 18)
                        .addComponent(lblNome)
                        .addGap(18, 18, 18)
                        .addComponent(txtNome, javax.swing.GroupLayout.DEFAULT_SIZE, 131, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnGerar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelecionar)
                    .addComponent(btnSelecionar)
                    .addComponent(lblLinguagem)
                    .addComponent(lblNome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbLinguagem, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(btnGerar))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelecionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarActionPerformed
        JFileChooser jFile = new JFileChooser();
        DefaultListModel dlm = new DefaultListModel();
        
        //SE A LINGUAGEM A SER USADA FOR "C"
        if("c".equals(cbLinguagem.getSelectedItem().toString())){      
            jFile.setFileFilter(new FileNameExtensionFilter("Arquivos c", "c"));
            jFile.setAcceptAllFileFilterUsed(false);
        }
        
        //SENAO
        else{
            jFile.setFileFilter(new FileNameExtensionFilter("Arquivos c++", "cpp"));
            jFile.setAcceptAllFileFilterUsed(false);
        }
        
        // HABILITANDO SELEÇÃO DE MULTIPLOS ARQUIVOS
        jFile.setMultiSelectionEnabled(true);
        
        // MOSTRANDO NA TELA O SELETOR DE ARQUIVOS
        jFile.showOpenDialog(this);
        
        //PEGANDO O VETOR DE ARQUIVOS SELECIONADOS
        File arquivos [] = jFile.getSelectedFiles();
        
        //SE O USUARIO TIVER SELECIONADO ARQUIVOS ENTÃO ESTES SERAO CARREGADOS NA JList
        if(arquivos.length > 0){
            for (File arquivo : arquivos) {
                dlm.addElement(arquivo.getName());
            }            
        }
        
        lstArquivos.setModel(dlm);
    }//GEN-LAST:event_btnSelecionarActionPerformed

    private void btnGerarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGerarActionPerformed

        //SE O NUMERO DE ARQUIVOS NA LISTA FOR MAIOR QUE ZERO
        if(lstArquivos.getModel().getSize() > 0){
            
            //SE O ARQUIVO PRINCIPAL NÃO ESTIVER SELECIONADO
            if(lstArquivos.isSelectionEmpty()){
                JOptionPane.showMessageDialog(this, "Selecione o arquivo principal", "Aviso", JOptionPane.OK_OPTION);
            }
            
            //SENAO
            else{
                
                //SE O CAMPO DO NOME DO EXECUTAVEL NÃO ESTIVER VAZIO
                if(txtNome.getText().length() > 0){
                    JFileChooser jFile = new JFileChooser();

                    jFile.setSelectedFile(new File("Makefile"));

                    //SE O USUÁRIO CONFIRMAR O DIRETORIO DE SALVAMENTO DO MAKEFILE
                    if (jFile.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
                        try {
                            criarMakefile(jFile.getSelectedFile());
                        } catch (IOException ex) {
                            Logger.getLogger(FormPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    }
                }
                
                //SENAO
                else{
                    txtNome.grabFocus();
                    JOptionPane.showMessageDialog(this, "Digite o nome do executavel", "Aviso", JOptionPane.OK_OPTION);
                }
            }
        }      
        
        //SENAO
        else{
            JOptionPane.showMessageDialog(this, "Primeiro selecione os arquivos", "Aviso", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_btnGerarActionPerformed

    private void txtNomeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNomeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNomeActionPerformed

    void criarMakefile(File caminho) throws IOException{
        
        //ABERTURA DE ARQUIVO PARA ESCRITA
        FileWriter escrita = new FileWriter(caminho);
        
        //STRING PARA "JOGAR" NO ARQUIVO
        String makefile;
        
        //DIRETIVA "all"
        makefile = "all: ";
        
        //LOOP PARA O NOME DOS ARQUIVOS
        for(int i = 0; i < lstArquivos.getModel().getSize(); i++){ 
            
            //SE "i" FOR DIFERENTE DO ARQUIVO PRINCIPAL
            if(i != lstArquivos.getSelectedIndex()){   
                
                //PEGA NOME DO ARQUIVO
                String aux = lstArquivos.getModel().getElementAt(i);
                
                //SE O ARQUIVO FOR .C
                if("c".equals(cbLinguagem.getSelectedItem().toString())){
                    aux = aux.replaceAll("\\.c", "\\.o");
                }
                
                //SE O ARQUIVO FOR .CPP
                else{
                    aux = aux.replaceAll("\\.cpp", "\\.o");
                }
                makefile += aux + " ";
            }        
        }
        
        // STRING CONTENDO O NOME DO ARQUIVO PRINCIPAL
        String principal = lstArquivos.getModel().getElementAt(lstArquivos.getSelectedIndex());
        
        
        makefile += principal + "\n\t";
        
        //SE O ARQUIVO DOR .C
        if("c".equals(cbLinguagem.getSelectedItem().toString())){
            makefile += "gcc -lm -o " + txtNome.getText() + " ";
        }
        
        //SE O ARQUIVO FOR .CPP
        else{
            makefile += "g++ -lm -o " + txtNome.getText() + " ";
        }
        
        makefile += principal += " ";
        
        
        for(int i = 0; i < lstArquivos.getModel().getSize(); i++){ 
            
            //SE "i" FOR DIFERENTE DO ARQUIVO PRINCIPAL
            if(i != lstArquivos.getSelectedIndex()){
                String aux = lstArquivos.getModel().getElementAt(i);
                
                //SE O ARQUIVO FOR .C
                if("c".equals(cbLinguagem.getSelectedItem().toString())){
                    aux = aux.replaceAll("\\.c", "\\.o");
                }
                
                //SE O ARQUIVO FOR .CPP
                else{
                    aux = aux.replaceAll("\\.cpp", "\\.o");
                }
                                
                makefile += aux + " ";
            }            
        }
        
        makefile += "\n";
        
        for(int i = 0; i < lstArquivos.getModel().getSize(); i++){ 
            
            //SE "i" FOR DIFERENTE DO ARQUIVO PRINCIPAL
            if(i != lstArquivos.getSelectedIndex()){
                
                //PEGA NOME DO ARQUIVO
                String nomeArquivo = lstArquivos.getModel().getElementAt(i);
                String aux = nomeArquivo;
               
                //SE O ARQUIVO FOR .C
                if("c".equals(cbLinguagem.getSelectedItem().toString())){
                    aux = aux.replaceAll("\\.c", "\\.o");
                }
                
                //SE O ARQUIVO FOR .CPP
                else{
                    aux = aux.replaceAll("\\.cpp", "\\.o");
                }
                
                makefile += aux + ": " + nomeArquivo + "\n\t";
                
                //SE O ARQUIVO FOR .C 
                if("c".equals(cbLinguagem.getSelectedItem().toString())){
                    makefile += "gcc -o " + aux + " -c " + nomeArquivo + "\n";
                }
                
                //SE O ARQUIVO FOR .CPP
                else{
                    makefile += "g++ -o " + aux + " -c " + nomeArquivo + "\n";
                }
            }
        }
        
        makefile += "clean:\n\tdel *.o main\n";
        makefile += "run:\n\tprograma";
        
        escrita.write(makefile);
        escrita.close();        
        
        JOptionPane.showMessageDialog(this, "Makefile gerado", "", JOptionPane.INFORMATION_MESSAGE);
                
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
                //INSTANCIA A VARIAVEL "FORM"
                FormPrincipal form = new FormPrincipal();  
                
                //COLOCA O FORM NO MEIO DA TELA
                form.setLocationRelativeTo(null);

                //TORNA O FORM VISIVEL
                form.setVisible(true);              
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGerar;
    private javax.swing.JButton btnSelecionar;
    private javax.swing.JComboBox<String> cbLinguagem;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblLinguagem;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblSelecionar;
    private javax.swing.JList<String> lstArquivos;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
